                <div class="container">
                    <div class="row">
                        <div class="col-lg-12">
                            <div class= "headSlide">
                                 <h2 >Implementació - Codificació de l'esquelet de classes i funcions de l'aplicació</h2>
                             </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-12">
                            <div class=bodySlide>
                                <p>Seguint els consells que heu extret dels fòrums anteriors, cal que implementeu l'esquelet de l'aplicació i mòduls del projecte CicliCat. Per aconseguir-ho amb èxit, feu prèviament el disseny descendent i l'esquema de mòduls i tasques.</p>
                                <p>Reflexioneu sobre quins mòduls creieu que hauria de tenir l'aplicació, quines tasques es poden desprendre i quines accions serien necessàries per executar aquestes tasques. </p>
                                <p>Tingueu en compte que l'enunciat indica que aquest prototipus no disposarà d'una gestió per poder afegir etapes, sinó que aquestes seran fixes i estaran definides al codi. Malgrat tot, el sistema, si que demana que les etapes es puguin llistar i es mostrin per la pantalla.</p>
                                <p>Quelcom semblant passa amb els equips, el patrocinadors i els premis corresponents. Les dades de tots ells estaran directament definides al codi, però en tots els casos es demana poder llistar les dades i mostrar-les per pantalla.</p>
                                <p>La inscripció de ciclistes sí que requerirà la intervenció de l'usuari. Per tant caldrà alguna tasca que permeti afegir nous ciclistes. Per descomptat, el sistema haurà de permetre també, llistar les dades d'inscripció dels ciclistes.</p>
                                <p>A l'apartat de gestió de la competició, veiem que ens demanen que l'usuari sigui capaç d'actualitzar els temps emprats pels ciclistes a cada etapa. Aquí també es demana poder llistar les dades introduïdes</p>
                                <p>Finalment a l'apartat d'informes, es demana conèixer els guanyadors dels diferents premis (maillot groc, verd, blanc i blau) amb l'import atorgat.</p>
                                <p>En aquests moments, no cal que feu la descomposició detallada de totes les tasques. Podeu deixar aquelles que veieu menys clares per a més endavant. De fet aquí, la descomposició important és la que arriba fins les tasques. Això us permetrà escriure l'esquelet bàsic de la classe principal: CicliCat, i dels mòduls corresponents.</p>
                                <p>Més endavant, quan hagueu d'implementar les funcions corresponents a les tasques, podreu fer una descomposició descendent específica de cada tasca que us resultarà més fàcil de realitzar perquè ja tindreu clara l'estructura de dades i disposareu de la visió global que encara us falta.</p>
                                <!-- Button trigger pannel -->
                                <button type="button" class="btn btn-primary btn-lg btn-toggle toggle-off" 
                                        data-toggle="button"
                                        data-parent-selector="#leftColumnPanel"
                                        data-display-on-set-slide="slc-toDo" 
                                        data-selector-clue="#slc-toDo-clue1">
                                    Pista 1
                                </button>                                        
                                <div id="slc-toDo-clue1" class="iocClue hidden">
                                    <h2>Pista 1</h2>
                                    <p>Heu de tenir en compte que en començar a definir un esquelet és impossible tenir-ho tot molt clar des del principi. Heu d'aprendre a jugar amb la incertesa. No passa res si no podem detallar-ho tot, començarem amb una esquema que anirem concretant a mida que sigui possible. A vegades no podrem concretar exactament quins paràmetres arribaran a una funció o quin tipus de dada retornarà, però això no ha d'impedir començar a fer la declaració de les funcions afegint comentaris d'allò que quedi sense concretar. De forma metafòrica podem dir que la implementació d'aplicacions és semblant a la construcció d'un trencaclosques on les peces són les funcions i les dades. Si aconseguim encaixar-les correctament, la'aplicació funcionarà correctament. Si les peces (dades i funcions) no encaixen, la funció petarà o no farà el que hauria de fer.</p>
                                    <p>De forma semblant a la construcció de trencaclosques, cal anar encaixant les peces parcialment, deixant forats per omplir i que acabarem encaixant quan trobem la peça adequada. Aquí cal fer el mateix comencem a declarar classes i funcions malgrat ens faltin peces per encaixar que ja implementarem en un futur quan ho tinguem més clar. La implementació presenta a més, l'avantatge que en realitat les peces les creem nosaltres a mida que implementem l'aplicació o per tant podem modificar-les en qualsevol moment per tal que encaixin perfectament.</p>
                                </div>  
                                <!-- Button trigger pannel -->
                                <button type="button" class="btn btn-primary btn-lg btn-toggle toggle-off" 
                                        data-toggle="button"
                                        data-parent-selector="#leftColumnPanel"
                                        data-display-on-set-slide="slc-toDo" 
                                        data-selector-clue="#slc-toDo-clue2">
                                    Pista 2
                                </button>                                        
                                <div id="slc-toDo-clue2" class="iocClue hidden">
                                    <h2>Pista 2</h2>
                                    <p>Recordeu que encara no heu decidit quina estructura de dades fareu servir, malgrat tot, això no és impediment per implementar aquest esquelet. Us proposem que de forma semblant a com s'ha fet a la tasca anterior, feu servir comentaris per indicar que necessitareu l'estructura de dades com a paràmetres i més endavant, així que hagueu declarat els tipus compostos, ja subtituireu els comentaris pel paràmetre real. Per exemple:</p>
                                    <pre><code class="java">
 public void iniciSms(/*EstructuraDades dades*/){
        //A CODIFICAR... 
   }
                                    </code></pre>
                                    <p>Una altre solució, també adequada, és suposar que tota l'estructura de dades estarà sempre inclosa en un únic tipus compost. En tractar-se d'una aplicació senzilla, aquesta suposició és perfectament factible.</p>
                                    <p>La solució passa per declarar un tipus compost buit, només amb el nom a fi de poder-lo fer servir com a paràmetre en  la declaració de les funcions. Així en aquest cas caldir crear una classe buida amb el nom, per exemple de <em>DadesCicliCat</em> i fer servir aquest tipus a la declaració de les funcions que necessitin paràmetres amb l'estructura de dades. Més endavant quan calgui implementar realment la funció, ja coneixerem les variables internes de l'estructura i podrem usar-les sense problemes. Vegem també un exemple:</p>
                                    <pre><code class="java">
/*Fitxer DadesCicliCat.java */
public class DadesCicliCat {
        //A DEFINIR
}

/*Fitxer ModulXXX.java */
public class ModulXXX {
    
    ...
    
    public void tascaAfegirCiclistes(DadesCiclicat dades){}
        //A CODIFICAR
    }
    
    ...
}
                                    </code></pre>
                                </div>  
                            </div>
                        </div>
                    </div>
                </div>

