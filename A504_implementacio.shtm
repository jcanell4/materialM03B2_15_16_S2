            <!--=========== BEGIN SECTION toDo10 ================-->    
            <!--section id="slc-toDo10" class="tasca section">
                <div class="container">
                    <div class="row">
                        <div class="col-lg-12">
                            <div class= "headSlide">
                                     <h2 >Tasques a realitzar-Implementació I</h2>
                                     <h3 ><span class="tascaTitle">Tasca</span> - Ampliació de l'esquelet de classes. </h3>
                             </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-12">
                            <div class=bodySlide>
                                <p>A l'activitat anterior us vàrem demanar que implementéssiu l'esquelet de classes fins al nivell de tasques. Ara però, després d'haver discutit al fòrum el concepte de tasca com <em>unitat complerta de processament</em> i, d'haver constatat que la majoria de tasques precisen d'almenys 3 accions, una per obtenir les dades inicials, una processar-les i la tercera per mostrar el resultat, us demanem que descompongueu en accions, les tasques que vàreu definir i, convertiu cada acció en una funció que afegireu a l'esquelet de classes del projecte. És a dir que fareu la declaració de les noves funcions a una de les classe de l'esquelet que vàreu crear.</p>
                                <p>No us oblideu tampoc dels <em>menús</em>, segur que són necessaris per mostrar el ventall d'opcions a seleccionar i per requerir a l'usuari que n'esculli una. Feu servir el sentit comú per intuir on caldrà definir un menú, on caldrà demanar dades a l'usuari, on presentar informació, etc. Segurament respondran a noms com <em>demanarXXX</em>, <em>mostrarYYY</em>, o similars. Penseu que fins i tot les tasques que no calculin resultat i per tant no hagin de mostrar res per pantalla, haurien de tenir una funció de sortida (segons els criteris de qualitat), per informar que el procediment ha finalitzat l'execució i indicar si aquest ha acabat amb èxit o no.</p>
                                <p>Doneu també nom a les funcions de tractament, les que calculen. En cas que hagin de retornar alguna dada, retorneu un valor qualsevol per tal que Netbeans no us marqui error. Intenteu que els noms donats siguin significatius.</p>
                                <p>Segurament, la classe on haureu de declarar les noves funcions serà la mateixa o es trobi la tasca que els accions descomponguin, però poden donar-se excepcions en cas que calgui o hagi calgut fer adaptacions per no repetir codi aplicant criteris de reutilització.</p>
                                <p>Recordeu que aquí només heu de fer la declaració, no comenceu encara a codificar-les. Espereu una mica a disposar de les biblioteques adequades.</p>
                                <!-- Button trigger pannel -->
                                <!--button type="button" class="btn btn-warning btn-lg toggle-off  btn-3d" 
                                        data-toggle="button"
                                        data-parent-selector="#leftColumnPanel"
                                        data-display-on-set-slide="slc-toDo10" 
                                        data-selector-clue="#slc-toDo10-clue1">
                                    Consell
                                </button>                                        
                                <div id="slc-toDo10-clue1" class="iocClue hidden">
                                    <p>Com ja es va comentar durant l'anterior implementació de l'esquelet, és impossible deixar-ho tot lligat des del començament. Per tant no us preocupeu encara si us falten o sobren paràmetres, si alguna de les accions necessitarà descompondre's més, etc. Ja arribarà el moment de concretar.</p>
                                    <p>Quan intuïu que en algunes funcions de demanda de dades o de mostra de resultat, en codificar-les, només caldrà fer una crida a una funció de biblioteca, podeu eliminar la declaració, a la implementació farem una crida directa a la funció de biblioteca corresponent.</p>
                                </div>  
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            <!--=========== END SECTION toDo10 ================-->    
                <!--=========== BEGIN SECTION biblioteques ================-->    
                <section id="slc-biblioteques" class="tasca section">
                    <div class="container">
                        <div class="row">
                            <div class="col-lg-12">
                                <div class= "headSlide">
                                     <h2 >Tasques a realitzar-Implementació I</h2>
                                     <h3 ><span class="tascaTitle">Tasca</span> - Implementació de les biblioteques</h3>
                                 </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-12">
                                <div class=bodySlide>
                                    <p>Abans d'entrar a la implementació de l'esquelet, us demanarem encara un darrer esforç per completar una biblioteca genèrica que us ajudi a crear de forma eficient interfícies d'usuari basades en consola. És tracta de crear una classe anomenada per exemple <em>BibliotecaInterficieUsuari</em> on hi copiareu totes les funcions que ja hàgiu implementat, d'ajuda a la creació d'interfícies d'usuari. També us demanarem que completeu la biblioteca amb altres funcions que ajudin a estandarditzar la mostra d'informació per pantalla.</p>
                                    <p>De moment comencem per copiar les que ja teniu fetes:</p>
                                    <ul>
                                        <li>A l'exercici 1 de l'activitat A402 vàreu fer una funció per demanar un valor double a l'usuari</li>
                                        <li>A la tasca 3 de l'activitat A404, vàreu crear 4 funcions per demanar diversos tipus de valor a l'usuari.</li>
                                        <li>Finalment a l'exercici 1 de l'activitat A405, vàreu implementar una funció per demanar un valor enter.</li>
                                    </ul>
                                    <p>Recupereu-les i copieu-les a la casse <em>BibliotecaInterficieUsuari</em></p>
                                    <p>Ara passem a crear noves funcions d'aquesta biblioteca. Recordeu que aquí les funcions ha de ser genèriques i han d'estar parametritzades per tal que es puguin fer servir en múltiples contextos i situacions. </p>
                                    <p>Per exemple, podeu implementar una funció que us ajudi a mostrar les opcions d'un menú i demani a l'usuari que seleccioni una de les opcions mostrades. O potser podeu implementar una funció que permeti mostrar en un format determinat, els títols de les diferents pantalles que haurà de tenir l'aplicació. D'aquesta manera l'usuari podrà identificar sempre on es troba. També podeu pensar en funcions que ajudin a estandarditzar els missatges d'error, informatius, etc. Finalment com a darrera idea, apuntem la possibilitat d'implementar una funció que permeti escriure un nombre fix de salts de línia de forma que simuli una neteja de pantalla a fi de poder començar a escriure amb la consola neta de missatges anteriors. </p>
                                    <p>En aquesta tasca ja no us detallem les funcions a implementar. Penseu-les vosaltres i adapteu la vostra producció al temps que disposeu. Intenteu per poc que pugueu fer les que us recomanem aquí, però si disposeu de poc temps, reduïu-les segons us convingui.</p>
                                     <!-- Button trigger pannel -->
                                    <button type="button" class="btn btn-primary btn-lg btn-toggle toggle-off" 
                                            data-toggle="button"
                                            data-parent-selector="#leftColumnPanel"
                                            data-display-on-set-slide="slc-biblioteques" 
                                            data-selector-clue="#slc-biblioteques-clue1">
                                        Pista 1
                                    </button>                                        
                                    <div id="slc-biblioteques-clue1" class="iocClue hidden">
                                        <h2>Pista 1</h2>
                                        <p>Suposa que la funció menú pugui mostrar per pantalla totes les opcions d'un menú identificades per un número o un caràcter i després de demanar a l'usuari que seleccioni una opció, retorni la opció escollida. Quins paràmetres creieu que hauria de rebre una funció que pugui ajudar a implementar menús, tenint en compte que cada menú tindrà diferents opcions? Intenta sistematitzar la presentació dels menús. Què creus que pot identificar cada una de les opcions del menú? Tenint en compte això, quin tipus de dada caldria demanar a l'usuari? I per tant, quin tipus de dada creus que hauria de retornar la funció</p>
                                    </div>  
                                    <!-- Button trigger pannel -->
                                    <button type="button" class="btn btn-primary btn-lg btn-toggle toggle-off" 
                                            data-toggle="button"
                                            data-parent-selector="#leftColumnPanel"
                                            data-display-on-set-slide="slc-biblioteques" 
                                            data-selector-clue="#slc-biblioteques-clue2">
                                        Pista 2
                                    </button>                                        
                                    <div id="slc-biblioteques-clue2" class="iocClue hidden">
                                        <h2>Pista 2</h2>
                                        <p>A l'hora de crear interfícies d'usuari de qualsevol aplicació, és important que els usuaris puguin identificar la categoria dels diferents missatges i textos de la pantalla gràcies a la seva situació i format. Aquesta identificació permet a l'usuari cercar la informació de forma més ràpida i predisposar-se a llegir el text amb major o menor atenció, segons l'activitat del moment.</p>
                                        <p>Així, per exemple podríem definir que cada pantalla de la nostra aplicació contingués a a la part superior dos títols identificant l'aplicació o la pantalla. Per tal d'identificar fàcilment els títols, es podrien formatar d'una forma específica que ajudés a identificar-los. Per exemple: </p>
                                        <pre>
************************************************************
**               Volta Ciclista a Catalunya               **
**                     Menú principal                     **
************************************************************                                        </pre>
                                        <p>També podem identificar de forma específica els missatges informatius que indiquin com ha anat una determinada operació:</p>
                                        <pre>
------------------------------------------------------------
Inscripció realitzada correctament
------------------------------------------------------------
                                        </pre>
                                        <p>O ressaltar els errors de forma prou contrastada per captar l'atenció del client:</p>
                                        <pre>
************************************************************
************************************************************
**                         ERROR                          **
************************************************************
************************************************************
************************************************************
L'equip al que voleu inscriure el ciclista
 ja està complert. La inscripció no és possible.
************************************************************
************************************************************                                        
                                        </pre>
                                    </div>  
                                    <button type="button" class="btn btn-primary btn-lg btn-toggle toggle-off" 
                                            data-toggle="button"
                                            data-parent-selector="#leftColumnPanel"
                                            data-display-on-set-slide="slc-biblioteques" 
                                            data-selector-clue="#slc-biblioteques-clue3">
                                        Pista 3
                                    </button>                                        
                                    <div id="slc-biblioteques-clue3" class="iocClue hidden">
                                        <h2>Pista 3</h2>
                                        <p>Podeu ampliar les funcions segons se us vagin acudint idees. Per exemple potser us podria ser útil afegir una funció que demani prémer la tecla [ENTRAR] per continuar executant. Segur que resulta molt útil per deixar que l'usuari pugui llegir textos llargs com llistes o informes, abans de tornar a demanar noves opcions d'un menú.</p>
                                    </div>  
                                    <button type="button" class="btn btn-primary btn-lg btn-toggle toggle-off" 
                                            data-toggle="button"
                                            data-parent-selector="#leftColumnPanel"
                                            data-display-on-set-slide="slc-biblioteques" 
                                            data-selector-clue="#slc-biblioteques-clue4">
                                        Pista 4
                                    </button>                                        
                                    <div id="slc-biblioteques-clue4" class="iocClue hidden">
                                        <h2>Pista 4</h2>
                                        <p>Recordeu que a la tasca 2 de l'activitat A501 vàreu fer un biblioteca de funcions estàtiques de tractament de cadenes, per retallar o farcir text a una mida determinada (la vau anomenar <em>Strings</em>). Potser podeu utilitzar-les aquí per aconseguir ajustar el text seguint un format determinat, per exemple centrant el text, o separant-lo del marge esquerra, ... </p>
                                        <p>Si encara no ho heu fet, copieu la classe <em>Strings</em> en el projecte de Netbeans per poder-la fer servir.</p>
                                    </div>  
                                </div> 
                            </div>
                        </div>
                    </div>
                </section>
                <!--=========== END SECTION integracio ================-->    
                <!--=========== BEGIN SECTION implementació 2 ================-->    
                <section id="slc-toDo2" class="tasca section">
                    <div class="container">
                        <div class="row">
                            <div class="col-lg-12">
                                <div class= "headSlide">
                                     <h2 >Tasques a realitzar-Implementació I</h2>
                                     <h3 > <span class="tascaTitle">Tasca</span> - Disseny de la interfície de l'usuari específica de l'aplicació</h3>
                                 </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-12">
                                <div class=bodySlide>
                                    <p>Sembla que ja està tot a punt per poder començar a implementar les funcions de l'esquelet. Com que aquesta activitat posa l'èmfasi a la interfície d'usuari, us demanem que de moment, us limiteu a implementar només les funcions de la interfície. És tracta només d'un consell per tal que us pugueu centrar en crear una bona interfície de qualitat.</p>
                                    <p>Recupereu doncs, els criteris de qualitat que heu analitzat a la <a href="#slc-discussion__slc-discussion24">secció de fòrums</a> i planifiqueu cada una de les pantalles de les tasques. Recordeu que cada una d'elles hauria de disposar de títols específics que donin informació a l'usuari, de la pantalla on es troba. Planifiqueu la informació que caldrà donar a l'usuari a fi que sàpiga sempre el que a de fer i intenteu estandarditzar les pantalla tant com us sigui possible a fi d'homogeneïtzar-les i facilitar els seu aprenentatge.</p>
                                    <p>Ajudeu-vos de la biblioteca que heu creat per ajudar a generar interfícies d'usuaris. Segur que us pot estalviar molt feina i us evitarà molts, molts errors.</p>
                                    <p>Repasseu les funcions creades a l'activitat A404, segur que aquí en podeu aprofitar algunes, a banda de les que ja heu incorporat a la <em>BibliotecaIntercicieUsuari</em>. Per exemple, segur que us seran útils les funcions <em>mostrarDetallImmoble</em> i <em>mostrarLlistaImmobles</em>. </p>
                                    <p>Insistim de nou, que aconsellem que us centreu només en les funcions d'intercanvi d'informació amb l'usuari, per poder-vos centrar en els criteris de qualitat i l'ús de biblioteques. Tot i així, si finalment decidiu implementar-ho tot, per manca de temps o per altres raons, us demanem que abans de començar la implementació, llegiu en paral·lel l'activitat <a class="toNextActivity">següent</a>, a fi de tenir en compte els consells i requeriments que allà se us plantegen.</p>
                                    <p>Malgrat no es correspongui pròpiament a cap funció d'intercanvi d'informació amb l'usuari, si que considerem una bona idea implementar la instanciació i inicialització dels tipus compostos que ja heu definit (estructura de dades). Per fer-ho caldrà que decidiu quin lloc creieu que és més oportú per a fer la instanciació. Sembla evident que les dades han d'estar instanciades abans que alguna funció comenci a fer-les servir. Per tant intenteu buscar el lloc idoni per tal que cap funció comenci a usar les dades sense estar instanciades, però evitant també que aquestes romanguin mes temps del necessari a la memòria per tal de no malbaratar-la innecessàriament.</p>
                                    <p>En cas que decidiu seguir el consell de centrar-vos aquí només en la interfície, us pot resultar útil, malgrat l'execució sigui nul·la, incorporar les crides de les funcions de tractament, de forma que després ja no calgui fer cap modificació i n'hi hagi prou només, implementant les funcions que manquin, per acabar el projecte. Per exemple, imaginem un aplicació que disposa d'una tasca que permet actualitzar una sèrie de premis per els participants i posteriorment assignar-los la remuneració pertinent al premi. En aquest cas la nostra implementació podria ser: </p>
                                    <pre><code class="java">
...
    void pantallaActualitzarPremis(DadesCicliCat dades) {
        boolean ret;
        //Pantalla per actualitzar premis i remuneracions
        interficieUsuari.mostrarTitols(TITOL_PANTALLA, "Actualització de les remuneracions i els premis");
        
        mostrarMissatgeIniciActualitzacioPremis();
        
        actualitzarPremis(dades);
        ret = actualitzacioRemuneracions(dades);
        
        mostrarMissatgeFinalActualitzacioPremis(ret);
    }
 
 ...
                                    </code></pre>
                                    <p>Fixeu-vos, com la funció <em>pantallaActualitzarPremis</em> (corresponent a una tasca), en implementar-la, posem totes les línies de codi necessàries per tal que funcioni quan totes les funcions es trobin implementades. Tot i així sabem que les funcions <em>actualitzarPremis</em> i <em>actualitzacioRemuneracions</em> estaran buides i per tant la actualització no es produirà, però no per això deixem de fer la crida. En canvi, la resta de funcions <em>mostrarMissatgeIniciActualitzacioPremis</em> i <em>mostrarMissatgeFinalActualitzacioPremis</em> si que els haurem d'implementar i si que s'executaran. Tampoc hi haurà cap problema en usar funcions de biblioteca (com <em>mostrarTitols</em>), perquè ja les tenim implementades. D'aquesta manera, podreu executar l'aplicació i comprovar fàcilment si les accions implementades són correctes.</p>
                                    <p>En cas que alguna funció de tractament, hagi de retornar alguna dada, podeu forçar el retorn d'un valor qualsevol dins la funció buida, per tal de d'evitar un error i recollir un valor vàlid a la funció que estiguem implementant. A l'exemple <em>pantallaActualitzarPremis</em>, s'espera que la funció <em>actualitzacioRemuneracions</em> retorni un valor lògic. Per tant a la classe la nostra funció estarà declarada com segueix:</p>
                                    <pre><code class="java">
...
    boolean actualitzacioRemuneracions(DadesCicliCat dades) {
        //A IMPLEMENTAR
        return false;
    }
 ...
                                    </code></pre>
                                    <p>D'aquesta manera, evitarem l'error i podrem fer la crida igual que si estès realment ben implementada. A més, canviant el valor de retorn, podrem provar diverses situacions, per veure si la nostra interfície respon adequadament a cada una d'elles.</p>
                                    <p>Tot i així, si haver de fer la crida a una funció encara no implementada us causés algun problema, no hi perdeu gaire temps, ja afinareu al final, quan la implementeu. De moment aquí, comenteu la crida per tal que no doni error o escriviu un comentari en el seu lloc, a mode de recordatori, i continueu amb la resta de la implementació.</p>
                                    <p>Si durant la codificació us adoneu que us fan falta més funcions, ja sigui a les classes de l'aplicació o en alguna biblioteca (Strings, interficie d'usuari, etc.), no us preocupeu, podeu implementar-les a mida que les aneu necessitant de manera que tingueu sempre les funcions disponibles per a ser utilitzades en les següents ocasions.</p>
                                    <!-- Button trigger pannel -->
                                    <button type="button" class="btn btn-warning btn-lg toggle-off  btn-3d" 
                                            data-toggle="button"
                                            data-parent-selector="#leftColumnPanel"
                                            data-display-on-set-slide="slc-toDo2" 
                                            data-selector-advice="#slc-toDo2-advice">
                                        Consells
                                    </button>                                        
                                    <div id="slc-toDo2-advice" class="iocAdvice hidden">
                                        <p>Ja hem vist que les estructures de dades, cal instanciar-les una vegada i anar-les passant per paràmetre, de funció, en funció. També hem vist que les classes que només contenen codi, podem instanciar-les tantes vegades com necessitem. No caldrà doncs que passem les seves instàncies per paràmetre, podem crear-les dins de cada funció de forma local. Per exemple, suposant que disposem d'una biblioteca per generar interfícies anomenada <em>InterficieConsola</em> i que l'estructura de dades és EstructuraDades, per poder-les usar a la funció següent, caldrà passar l'estructura per paràmetre i instanciar la interfície com a variable local:</p>
                                        <pre><code class="java">
void funcioExemple(EstructuraDades dades){
    InterficieConsola interficie = new InterficieConsola();
    
    dades.valor = interficie.entrarEnter("Entra el valor actual?");
    
    dades.resultat = calcularResultat(dades);
    
    interfie.mostrarResultat("El resultat obtingut és: " + dades.resultat);
}
                                        </code></pre>
                                        <p>Això a vegades, pot resultar una mica tediós, ja que contínuament cal estar instanciant classes de codi. És possible, però, evitar-ho declarant un única instancia de cada classe contenint només codi, de tipus global, així podrem utilitzar la instancia en qualsevol funció de la classe on es trobi declarada, sense haver de reiterar constantment la mateixa instanciació.</p>
                                        <p>Recordeu, que hem insistit àrduament, dient que eviteu sempre que pugueu l'ús de variables globals. Ara bé, en aquests casos, el fet que la classe instanciada de forma global no contingui dades, fa que sigui indiferent si la instancia és global o local, ja que només la necessitem per executar el codi de les seves funcions.</p>
                                        <p>Aquesta pràctica, però, no està exempta de perills. Un error molt típic de principiant, consisteix en crear instancies globals en dues classes les quals es necessiten una a l'altra. És a dir la primera fa servir funcions de la segona i aquesta, a la vegada fa servir funcions de la primera:</p>
                                        <pre><code class="java">
/*Classe ClassePrincipal que en una de les seves funcions necessita un instància de ClassePrimera.
  La classe  ClassePrincipal està implementada en el fitxer ClassePrincipal.java */
public class ClassePrincipal{
    ...
    public void prova(){
        ClassePrimera codiDeProva = new ClassePrimera()
        
        codiDePRova.executar();
    }
}
                                        
/*Classe ClassePrimera implementada en el fitxer ClassePrimera.java */
public class ClassePrimera{
    public ClasseSegona codiNecessariDeCSegona = new ClasseSegona();
    
    ...
}

/*Classe ClasseSegona implementada en el fitxer ClasseSegona.java */
public class ClasseSegona{
    public ClassePrimera codiNecessariDeCPrimera = new ClassePrimera();
    
    ...
}
                                        </code></pre>
                                        <p>En crear un instància d'una classe, simultàniament, es creen també totes les instancies de les seves variables globals. Com podeu suposar, això és realment un problema per el codi anterior, ja que mai arribaria a executar-se la instrucció <em>codiDePRova.executar();</em>, doncs en intentar crear la instància de ClassePrimera (des de la classe ClassePrincipal), obtindríem un error de desbordament de pila, degut a que la instancia creada, té una variable global de tipus ClasseSegona. Això farà que dins de la instancia de la variable codiDeProva, es crei un instancia de tipus ClasseSegona  (<em>codiDeProva.codiNecessariDeCSegona</em>). Ara bé, la classe ClasseSegona conté també una variable global de tipus ClassePrimera. D'acord amb el que hem explicat, dins la instancia de la classe ClasseSegona es crearà un nova instancia de ClassePrimera que serà diferent a la original, perquè aquesta es troba dins de  <em>codiDeProva.codiNecessariDeCSegona.codiNecessariDeCPrimera</em>. La nova instància contindrà un nova versió de  ClasseSegona i aquesta una nova de la classe ClassePrimera:  <em>codiDeProva.codiNecessariDeCSegona.codiNecessariDeCPrimera.codiNecessariDeCSegona.codiNecessariDeCPrimera</em>. Entrarem així en un bucle infinit que anirà creant instàncies fins esgotar totalment la memòria de l'ordinador, moment en el que obtindrem l'error de desbordament.</p>
                                        <p>Si encara no controleu massa la instanciació de classes, eviteu l'ús de variables globals i malgrat que us representi una mica més de feina, useu només instàncies de tipus local.</p>
                                       <p>D'altra banda, tingueu també present, que les biblioteques amb funcions estàtiques no s'han d'instanciar. Les seves funcions es poden cridar directament anteposant el nom de la classe seguit d'un punt:</p> 
                                       <pre><code class="java">
public class ClassePrincipal{
    ...
    public void prova(){
        BibliotecaEstatica.executarFuncioEstatica();
    }
    
    ...
}
                                       </code></pre>
                                    </div>  
                                    <!-- Button trigger pannel -->
                                    <button type="button" class="btn btn-primary btn-lg btn-toggle toggle-off" 
                                            data-toggle="button"
                                            data-parent-selector="#leftColumnPanel"
                                            data-display-on-set-slide="slc-toDo2" 
                                            data-selector-clue="#slc-toDo2-clue4">
                                        Pista 1
                                    </button>                                        
                                    <div id="slc-toDo2-clue4" class="iocClue hidden">
                                        <h2>Pista 1</h2>
                                        <p>Plantegeu-vos en quin lloc haureu d'instanciar l'estructura de dades. Recordeu que l'aplicació, abans de començar a ser operativa haurà d'haver importat les dades, des de la base de dades central. Això significa que abans de fer la importació caldrà disposa de les dades inicialitzades.</p>
                                        <p>Si finalment, heu decidit crear dos tipus compostos, un d'ells per gestionar els filtres i les dades filtrades dels clients que vulguin consultar els anuncis, plantegeu-vos també, on necessitareu instanciar aquest tipus compost, tenint en compte que es tracta de dades temporal que només tindran vigència mentre l'usuari es trobi consultant els anuncis.</p>
                                    </div>  
                                    <!-- Button trigger pannel -->
                                    <button type="button" class="btn btn-primary btn-lg btn-toggle toggle-off" 
                                            data-toggle="button"
                                            data-parent-selector="#leftColumnPanel"
                                            data-display-on-set-slide="slc-toDo2" 
                                            data-selector-clue="#slc-toDo2-clue2">
                                        Pista 2
                                    </button>                                        
                                    <div id="slc-toDo2-clue2" class="iocClue hidden">
                                        <h2>Pista 2</h2>
                                        <p>Recordeu que a la tasca d'afegir anuncis, abans de demanar cap dada, cal verificar si l'usuari té les condicions per poder afegir-lo. És a dir si l'usuari manté donats d'alta menys de tres anuncis. Recordeu també que al gestor de dades ja heu implementat un funció encarregada de fer aquesta verificació. </p>
                                        <p>Finalment, recordeu també que en el mateix gestor de dades varau implementar també la funció per afegir nous anuncis.</p>
                                    </div>  
                                    <!-- Button trigger pannel -->
                                    <button type="button" class="btn btn-primary btn-lg btn-toggle toggle-off" 
                                            data-toggle="button"
                                            data-parent-selector="#leftColumnPanel"
                                            data-display-on-set-slide="slc-toDo2" 
                                            data-selector-clue="#slc-toDo2-clue1">
                                        Pista 3
                                    </button>                                        
                                    <div id="slc-toDo2-clue1" class="iocClue hidden">
                                        <h2>Pista 3</h2>
                                        <p>Hi ha tasques, que per la seva transcendència, es necessari desplegar un conjunt de mitjans destinats a assegurar que l'usuari és conscient del que està fent. Un exemple d'això és, per exemple, l'eliminació d'un anunci, ja que un cop eliminat no serà possible recuperar les dades. Valoreu coses que podeu fer per assegurar que les intencions de l'usuari es corresponen amb els actes. Per exemple, potser seria convenient, un cop que l'usuari hagi escollit l'immoble a eliminar, que l'aplicació mostri el detall de totes les dades de l'immoble i demani la confirmació de l'eliminació. D'aquesta manera es força a l'usuari a llegir les dades de l'immoble escollit i a verificar-en l'eliminació.</p>
                                    </div>  
                                    <!-- Button trigger pannel -->
                                    <button type="button" class="btn btn-primary btn-lg btn-toggle toggle-off" 
                                            data-toggle="button"
                                            data-parent-selector="#leftColumnPanel"
                                            data-display-on-set-slide="slc-toDo2" 
                                            data-selector-clue="#slc-toDo2-clue3">
                                        Pista 4
                                    </button>                                        
                                    <div id="slc-toDo2-clue3" class="iocClue hidden">
                                        <h2>Pista 4</h2>
                                        <p>A l'hora de demanar a l'usuari, les dades per configurar el filtre, heu de tenir en compte que cada propietat disposa de valors per defecte de manera que l'usuari no estigui obligat a donar valors a totes elles. El valor per defecte indica absència de cribratge associat a la propietat específica. És a dir qualsevol valor corresponent a les propietats que tinguin el valor per defecte serà acceptat com a pertanyent als immobles filtrats en referencia a la propietat específica. Això significa que un filtre constituït exclusivament valors per defecte a les seves propietats, obtindrà tots els anuncis existents a l'aplicació en aplicar el filtre.</p>
                                        <p>Podeu establir que els valors per defecte dels valors textuals siguin cadenes buides. Pels valors numèrics, com que gestionen el filtre usant rangs amb un límit inferior i un se superior, podeu establir que el valor per defecte del valor mínim sigui 0 i el del valor màxim el major número enter que l'ordinador pot representar i que aconseguireu invocant el valor constant <em>MAX_VALUE</em>, contingut a la classe Integer. Per exemple:</p>
                                        <pre><code class="java">
int valorMaxim = Integer.MAX_VALUE; //Aquí s'assigna a la variable valorMaxim, el màxim enter de tipus <em>Integer</em> que JAVA és capaç de representar.
                                        </code></pre>
                                        <p>Intenteu també assegurar que a l'hora de donar valor al tipus d'immoble, l'usuari només pugui escriure valors vàlids. Per fer-ho eviteu de demanar que escrigui el valor lliurament. És preferible mostrar els valors vàlids i proposar-li alguna forma per tal que pugui escollir només una de les opcions proposades. Si ho feu així, recordeu que ha de ser possible escollir la opció per defecte que es podria traduir per "<em>qualsevol valor</em>".</p>
                                    </div>
                                    <!-- Button trigger pannel -->
                                    <button type="button" class="btn btn-primary btn-lg btn-toggle toggle-off" 
                                            data-toggle="button"
                                            data-parent-selector="#leftColumnPanel"
                                            data-display-on-set-slide="slc-toDo2" 
                                            data-selector-clue="#slc-toDo2-clue5">
                                        Pista 5
                                    </button>                                        
                                    <div id="slc-toDo2-clue5" class="iocClue hidden">
                                        <h2>Pista 5</h2>
                                        <p>Si durant la implementació de les accions que heu definit a la primera tasca, us adoneu que, algunes funcions es codifiquen amb només una única crida a una biblioteca, és aconsellable eliminar la funció i cridar directament la biblioteca, des de la tasca original, on s'havia de fer la crida a l'acció.</p>
                                    </div>
                                </div> 
                            </div>
                        </div>
                    </div>
                </section>
                <!--=========== END SECTION implementació 2 ================-->    

